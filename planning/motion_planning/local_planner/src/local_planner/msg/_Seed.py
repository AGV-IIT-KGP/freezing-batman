"""autogenerated by genpy from local_planner/Seed.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Seed(genpy.Message):
  _md5sum = "f357548366aaa19eb79c81a20b07badc"
  _type = "local_planner/Seed"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 velocityRatio
float64 leftVelocity
float64 rightVelocity
float64 x
float64 y
float64 theta
float64 curvature
float64 costOfseed

"""
  __slots__ = ['velocityRatio','leftVelocity','rightVelocity','x','y','theta','curvature','costOfseed']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       velocityRatio,leftVelocity,rightVelocity,x,y,theta,curvature,costOfseed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Seed, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.velocityRatio is None:
        self.velocityRatio = 0.
      if self.leftVelocity is None:
        self.leftVelocity = 0.
      if self.rightVelocity is None:
        self.rightVelocity = 0.
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.theta is None:
        self.theta = 0.
      if self.curvature is None:
        self.curvature = 0.
      if self.costOfseed is None:
        self.costOfseed = 0.
    else:
      self.velocityRatio = 0.
      self.leftVelocity = 0.
      self.rightVelocity = 0.
      self.x = 0.
      self.y = 0.
      self.theta = 0.
      self.curvature = 0.
      self.costOfseed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8d.pack(_x.velocityRatio, _x.leftVelocity, _x.rightVelocity, _x.x, _x.y, _x.theta, _x.curvature, _x.costOfseed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.velocityRatio, _x.leftVelocity, _x.rightVelocity, _x.x, _x.y, _x.theta, _x.curvature, _x.costOfseed,) = _struct_8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8d.pack(_x.velocityRatio, _x.leftVelocity, _x.rightVelocity, _x.x, _x.y, _x.theta, _x.curvature, _x.costOfseed))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.velocityRatio, _x.leftVelocity, _x.rightVelocity, _x.x, _x.y, _x.theta, _x.curvature, _x.costOfseed,) = _struct_8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8d = struct.Struct("<8d")
