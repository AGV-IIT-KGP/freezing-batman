/* Auto-generated by genmsg_cpp for file /home/krishna/fuerte_workspace/sandbox/freezing-batman/planning/motion_planning/global_planner/msg/Seed.msg */
#ifndef GLOBAL_PLANNER_MESSAGE_SEED_H
#define GLOBAL_PLANNER_MESSAGE_SEED_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace global_planner
{
template <class ContainerAllocator>
struct Seed_ {
  typedef Seed_<ContainerAllocator> Type;

  Seed_()
  : velocityRatio(0.0)
  , leftVelocity(0.0)
  , rightVelocity(0.0)
  , x(0.0)
  , y(0.0)
  , theta(0.0)
  , curvature(0.0)
  , costOfseed(0.0)
  {
  }

  Seed_(const ContainerAllocator& _alloc)
  : velocityRatio(0.0)
  , leftVelocity(0.0)
  , rightVelocity(0.0)
  , x(0.0)
  , y(0.0)
  , theta(0.0)
  , curvature(0.0)
  , costOfseed(0.0)
  {
  }

  typedef double _velocityRatio_type;
  double velocityRatio;

  typedef double _leftVelocity_type;
  double leftVelocity;

  typedef double _rightVelocity_type;
  double rightVelocity;

  typedef double _x_type;
  double x;

  typedef double _y_type;
  double y;

  typedef double _theta_type;
  double theta;

  typedef double _curvature_type;
  double curvature;

  typedef double _costOfseed_type;
  double costOfseed;


  typedef boost::shared_ptr< ::global_planner::Seed_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::global_planner::Seed_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Seed
typedef  ::global_planner::Seed_<std::allocator<void> > Seed;

typedef boost::shared_ptr< ::global_planner::Seed> SeedPtr;
typedef boost::shared_ptr< ::global_planner::Seed const> SeedConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::global_planner::Seed_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::global_planner::Seed_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace global_planner

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::global_planner::Seed_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::global_planner::Seed_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::global_planner::Seed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f357548366aaa19eb79c81a20b07badc";
  }

  static const char* value(const  ::global_planner::Seed_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf357548366aaa19eULL;
  static const uint64_t static_value2 = 0xb79c81a20b07badcULL;
};

template<class ContainerAllocator>
struct DataType< ::global_planner::Seed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "global_planner/Seed";
  }

  static const char* value(const  ::global_planner::Seed_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::global_planner::Seed_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 velocityRatio\n\
float64 leftVelocity\n\
float64 rightVelocity\n\
float64 x\n\
float64 y\n\
float64 theta\n\
float64 curvature\n\
float64 costOfseed\n\
\n\
";
  }

  static const char* value(const  ::global_planner::Seed_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::global_planner::Seed_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::global_planner::Seed_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.velocityRatio);
    stream.next(m.leftVelocity);
    stream.next(m.rightVelocity);
    stream.next(m.x);
    stream.next(m.y);
    stream.next(m.theta);
    stream.next(m.curvature);
    stream.next(m.costOfseed);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Seed_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::global_planner::Seed_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::global_planner::Seed_<ContainerAllocator> & v) 
  {
    s << indent << "velocityRatio: ";
    Printer<double>::stream(s, indent + "  ", v.velocityRatio);
    s << indent << "leftVelocity: ";
    Printer<double>::stream(s, indent + "  ", v.leftVelocity);
    s << indent << "rightVelocity: ";
    Printer<double>::stream(s, indent + "  ", v.rightVelocity);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "curvature: ";
    Printer<double>::stream(s, indent + "  ", v.curvature);
    s << indent << "costOfseed: ";
    Printer<double>::stream(s, indent + "  ", v.costOfseed);
  }
};


} // namespace message_operations
} // namespace ros

#endif // GLOBAL_PLANNER_MESSAGE_SEED_H

